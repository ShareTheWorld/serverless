package client

import (
	nodePb "com/aliyun/serverless/nodeservice/proto"
	resPb "com/aliyun/serverless/resourcemanager/proto"
	global "com/aliyun/serverless/scheduler/utils/groble"
	"context"
	"fmt"
	"google.golang.org/grpc"
)

//resource manager grpc client
var resClient resPb.ResourceManagerClient

// node service grpc client
var nodeClients map[string]nodePb.NodeServiceClient

//连接到资源管理器服务
func ConnectResourceManagerService() {
	fmt.Printf("connect to resource manager service,Address: %s\n", global.ResourceManagerEndpoint)
	//连接到grpc服务
	resConn, err := grpc.Dial(global.ResourceManagerEndpoint, grpc.WithInsecure())
	if err != nil {
		fmt.Println(err)
	}
	//defer resConn.Close()

	//初始化客户端
	resClient = resPb.NewResourceManagerClient(resConn)
}

//预定节点
func ReserveNode(req *resPb.ReserveNodeRequest) *resPb.ReserveNodeReply {
	res, err := resClient.ReserveNode(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}

//释放节点
func ReleaseNode(req *resPb.ReleaseNodeRequest) *resPb.ReleaseNodeReply {
	res, err := resClient.ReleaseNode(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}

//获取节点使用情况
func GetNodesUsage(req *resPb.GetNodesUsageRequest) *resPb.GetNodesUsageReply {
	res, err := resClient.GetNodesUsage(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}

func Test() {
	ConnectResourceManagerService()
	ReserveNode(new(resPb.ReserveNodeRequest))
	ReleaseNode(new(resPb.ReleaseNodeRequest))
	GetNodesUsage(new(resPb.GetNodesUsageRequest))

	c := ConnectNodeService(nil)
	CreateContainer(c, new(nodePb.CreateContainerRequest))
	RemoveContainer(c, new(nodePb.RemoveContainerRequest))
	GetStats(c, new(nodePb.GetStatsRequest))
}

//连接到节点服务
func ConnectNodeService(node *resPb.ReserveNodeReply) nodePb.NodeServiceClient {
	//连接到grpc服务
	//address := fmt.Sprintf("%s,%d", node.Node.Address, node.Node.NodeServicePort)
	//fmt.Printf("connect to node service,Address: %s\n", address)
	nodeConn, err := grpc.Dial("127.0.0.1:30000", grpc.WithInsecure())
	if err != nil {
		fmt.Println(err)
	}
	//defer nodeConn.Close()

	//初始化客户端
	var nodeClient = nodePb.NewNodeServiceClient(nodeConn)
	return nodeClient
}

//创建容器
func CreateContainer(nodeClient nodePb.NodeServiceClient, req *nodePb.CreateContainerRequest) *nodePb.CreateContainerReply {
	res, err := nodeClient.CreateContainer(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}

//销毁容器
func RemoveContainer(nodeClient nodePb.NodeServiceClient, req *nodePb.RemoveContainerRequest) *nodePb.RemoveContainerReply {
	res, err := nodeClient.RemoveContainer(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}

//获取状态
func GetStats(nodeClient nodePb.NodeServiceClient, req *nodePb.GetStatsRequest) *nodePb.GetStatsReply {
	res, err := nodeClient.GetStats(context.Background(), req)
	if err != nil {
		fmt.Println(err)
	}
	return res
}
