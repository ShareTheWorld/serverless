// Protocol for resourcemanager.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: resource_manager.proto

package resourcemanagerproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ReserveNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *ReserveNodeRequest) Reset() {
	*x = ReserveNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNodeRequest) ProtoMessage() {}

func (x *ReserveNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNodeRequest.ProtoReflect.Descriptor instead.
func (*ReserveNodeRequest) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{0}
}

func (x *ReserveNodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReserveNodeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ReserveNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *NodeDesc `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *ReserveNodeReply) Reset() {
	*x = ReserveNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNodeReply) ProtoMessage() {}

func (x *ReserveNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNodeReply.ProtoReflect.Descriptor instead.
func (*ReserveNodeReply) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ReserveNodeReply) GetNode() *NodeDesc {
	if x != nil {
		return x.Node
	}
	return nil
}

type NodeDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address                 string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	NodeServicePort         int64  `protobuf:"varint,3,opt,name=node_service_port,json=nodeServicePort,proto3" json:"node_service_port,omitempty"`
	MemoryInBytes           int64  `protobuf:"varint,4,opt,name=memory_in_bytes,json=memoryInBytes,proto3" json:"memory_in_bytes,omitempty"`
	ReservedTimeTimestampMs int64  `protobuf:"varint,5,opt,name=reserved_time_timestamp_ms,json=reservedTimeTimestampMs,proto3" json:"reserved_time_timestamp_ms,omitempty"`
	ReleasedTimeTimestampMs int64  `protobuf:"varint,6,opt,name=released_time_timestamp_ms,json=releasedTimeTimestampMs,proto3" json:"released_time_timestamp_ms,omitempty"`
}

func (x *NodeDesc) Reset() {
	*x = NodeDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDesc) ProtoMessage() {}

func (x *NodeDesc) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDesc.ProtoReflect.Descriptor instead.
func (*NodeDesc) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{2}
}

func (x *NodeDesc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeDesc) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NodeDesc) GetNodeServicePort() int64 {
	if x != nil {
		return x.NodeServicePort
	}
	return 0
}

func (x *NodeDesc) GetMemoryInBytes() int64 {
	if x != nil {
		return x.MemoryInBytes
	}
	return 0
}

func (x *NodeDesc) GetReservedTimeTimestampMs() int64 {
	if x != nil {
		return x.ReservedTimeTimestampMs
	}
	return 0
}

func (x *NodeDesc) GetReleasedTimeTimestampMs() int64 {
	if x != nil {
		return x.ReleasedTimeTimestampMs
	}
	return 0
}

type ReleaseNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReleaseNodeRequest) Reset() {
	*x = ReleaseNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNodeRequest) ProtoMessage() {}

func (x *ReleaseNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNodeRequest.ProtoReflect.Descriptor instead.
func (*ReleaseNodeRequest) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseNodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReleaseNodeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReleaseNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseNodeReply) Reset() {
	*x = ReleaseNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseNodeReply) ProtoMessage() {}

func (x *ReleaseNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseNodeReply.ProtoReflect.Descriptor instead.
func (*ReleaseNodeReply) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{4}
}

type GetNodesUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetNodesUsageRequest) Reset() {
	*x = GetNodesUsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesUsageRequest) ProtoMessage() {}

func (x *GetNodesUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesUsageRequest.ProtoReflect.Descriptor instead.
func (*GetNodesUsageRequest) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodesUsageRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetNodesUsageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeDesc `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetNodesUsageReply) Reset() {
	*x = GetNodesUsageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesUsageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesUsageReply) ProtoMessage() {}

func (x *GetNodesUsageReply) ProtoReflect() protoreflect.Message {
	mi := &file_resource_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesUsageReply.ProtoReflect.Descriptor instead.
func (*GetNodesUsageReply) Descriptor() ([]byte, []int) {
	return file_resource_manager_proto_rawDescGZIP(), []int{6}
}

func (x *GetNodesUsageReply) GetNodes() []*NodeDesc {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_resource_manager_proto protoreflect.FileDescriptor

var file_resource_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22,
	0x43, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x32, 0xc0, 0x02, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x61, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_manager_proto_rawDescOnce sync.Once
	file_resource_manager_proto_rawDescData = file_resource_manager_proto_rawDesc
)

func file_resource_manager_proto_rawDescGZIP() []byte {
	file_resource_manager_proto_rawDescOnce.Do(func() {
		file_resource_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_manager_proto_rawDescData)
	})
	return file_resource_manager_proto_rawDescData
}

var file_resource_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_resource_manager_proto_goTypes = []interface{}{
	(*ReserveNodeRequest)(nil),   // 0: resourcemanagerproto.ReserveNodeRequest
	(*ReserveNodeReply)(nil),     // 1: resourcemanagerproto.ReserveNodeReply
	(*NodeDesc)(nil),             // 2: resourcemanagerproto.NodeDesc
	(*ReleaseNodeRequest)(nil),   // 3: resourcemanagerproto.ReleaseNodeRequest
	(*ReleaseNodeReply)(nil),     // 4: resourcemanagerproto.ReleaseNodeReply
	(*GetNodesUsageRequest)(nil), // 5: resourcemanagerproto.GetNodesUsageRequest
	(*GetNodesUsageReply)(nil),   // 6: resourcemanagerproto.GetNodesUsageReply
}
var file_resource_manager_proto_depIdxs = []int32{
	2, // 0: resourcemanagerproto.ReserveNodeReply.node:type_name -> resourcemanagerproto.NodeDesc
	2, // 1: resourcemanagerproto.GetNodesUsageReply.nodes:type_name -> resourcemanagerproto.NodeDesc
	0, // 2: resourcemanagerproto.ResourceManager.ReserveNode:input_type -> resourcemanagerproto.ReserveNodeRequest
	3, // 3: resourcemanagerproto.ResourceManager.ReleaseNode:input_type -> resourcemanagerproto.ReleaseNodeRequest
	5, // 4: resourcemanagerproto.ResourceManager.GetNodesUsage:input_type -> resourcemanagerproto.GetNodesUsageRequest
	1, // 5: resourcemanagerproto.ResourceManager.ReserveNode:output_type -> resourcemanagerproto.ReserveNodeReply
	4, // 6: resourcemanagerproto.ResourceManager.ReleaseNode:output_type -> resourcemanagerproto.ReleaseNodeReply
	6, // 7: resourcemanagerproto.ResourceManager.GetNodesUsage:output_type -> resourcemanagerproto.GetNodesUsageReply
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_resource_manager_proto_init() }
func file_resource_manager_proto_init() {
	if File_resource_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resource_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesUsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesUsageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_resource_manager_proto_goTypes,
		DependencyIndexes: file_resource_manager_proto_depIdxs,
		MessageInfos:      file_resource_manager_proto_msgTypes,
	}.Build()
	File_resource_manager_proto = out.File
	file_resource_manager_proto_rawDesc = nil
	file_resource_manager_proto_goTypes = nil
	file_resource_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceManagerClient is the client API for ResourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceManagerClient interface {
	ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error)
	ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error)
	GetNodesUsage(ctx context.Context, in *GetNodesUsageRequest, opts ...grpc.CallOption) (*GetNodesUsageReply, error)
}

type resourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerClient(cc grpc.ClientConnInterface) ResourceManagerClient {
	return &resourceManagerClient{cc}
}

func (c *resourceManagerClient) ReserveNode(ctx context.Context, in *ReserveNodeRequest, opts ...grpc.CallOption) (*ReserveNodeReply, error) {
	out := new(ReserveNodeReply)
	err := c.cc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReserveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) ReleaseNode(ctx context.Context, in *ReleaseNodeRequest, opts ...grpc.CallOption) (*ReleaseNodeReply, error) {
	out := new(ReleaseNodeReply)
	err := c.cc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/ReleaseNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerClient) GetNodesUsage(ctx context.Context, in *GetNodesUsageRequest, opts ...grpc.CallOption) (*GetNodesUsageReply, error) {
	out := new(GetNodesUsageReply)
	err := c.cc.Invoke(ctx, "/resourcemanagerproto.ResourceManager/GetNodesUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServer is the server API for ResourceManager service.
type ResourceManagerServer interface {
	ReserveNode(context.Context, *ReserveNodeRequest) (*ReserveNodeReply, error)
	ReleaseNode(context.Context, *ReleaseNodeRequest) (*ReleaseNodeReply, error)
	GetNodesUsage(context.Context, *GetNodesUsageRequest) (*GetNodesUsageReply, error)
}

// UnimplementedResourceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServer struct {
}

func (*UnimplementedResourceManagerServer) ReserveNode(context.Context, *ReserveNodeRequest) (*ReserveNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNode not implemented")
}
func (*UnimplementedResourceManagerServer) ReleaseNode(context.Context, *ReleaseNodeRequest) (*ReleaseNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseNode not implemented")
}
func (*UnimplementedResourceManagerServer) GetNodesUsage(context.Context, *GetNodesUsageRequest) (*GetNodesUsageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesUsage not implemented")
}

func RegisterResourceManagerServer(s *grpc.Server, srv ResourceManagerServer) {
	s.RegisterService(&_ResourceManager_serviceDesc, srv)
}

func _ResourceManager_ReserveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReserveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReserveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReserveNode(ctx, req.(*ReserveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_ReleaseNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/ReleaseNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).ReleaseNode(ctx, req.(*ReleaseNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManager_GetNodesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServer).GetNodesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resourcemanagerproto.ResourceManager/GetNodesUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServer).GetNodesUsage(ctx, req.(*GetNodesUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resourcemanagerproto.ResourceManager",
	HandlerType: (*ResourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveNode",
			Handler:    _ResourceManager_ReserveNode_Handler,
		},
		{
			MethodName: "ReleaseNode",
			Handler:    _ResourceManager_ReleaseNode_Handler,
		},
		{
			MethodName: "GetNodesUsage",
			Handler:    _ResourceManager_GetNodesUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_manager.proto",
}
