CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go


go get -u google.golang.org/grpc

go get github.com/golang/protobuf/protoc-gen-go

protoc --plugin=/Users/fht/.go/bin/protoc-gen-go  --go_out=./ Prod.proto

protoc --plugin=/Users/fht/.go/bin/protoc-gen-go -I . --go_out=plugins=grpc:. ./*.proto




 java -Dserver.port=7000 -DcheckSumPath=./checkSum.data -jar ./scoring-1.0-SNAPSHOT.jar
  sudo docker run -it --net host  -e "SERVER_PORT=8002"  challenge:1.7 /bin/bash
  sudo docker run -it --net host  -e "SERVER_PORT=8002"  challenge:4.3.1 /bin/bash
  sudo docker run -it   -e "SERVER_PORT=8002"  challenge:1.6 /bin/bash
  sudo docker ps -a
   docker images
    sudo docker stop 22819c93c898
    sudo docker logs --tail -f -n 1000
    sudo docker push registry.cn-hangzhou.aliyuncs.com/aliyun_challenge/challenge:1.8
    sudo docker tag 7c0fc37b9238  registry.cn-hangzhou.aliyuncs.com/aliyun_challenge/challenge:1.8
    sudo docker build -t challenge:1.8 .
sudo docker search ubuntu
sudo docker logs -f -t --tail 1000 41c98741881a

java -Dserver.port=7000 -DcheckSumPath=./checkSum3.data -jar ./scoring-1.0-SNAPSHOT.jar


java -Xms2048m  -Xmn1024m -XX:CompileThreshold=1000 -jar ./challenge.jar 8000

java -Xms2048m  -Xmn1024m -XX:CompileThreshold=1000 -jar ./challenge.jar 8001

java -Xms1500m  -Xmn512m  -XX:CompileThreshold=1000 -jar ./challenge.jar 8002

-Xmx3550m ：设置JVM最大可用内存为3550M。

-Xms3550m：设置JVM初始内存为3550m

-Xmn2g：设置年轻代大小为2G。整个堆大小=年轻代大小 + 年老代大小 + 持久代大小

-XX:+PrintCompilation

-verbose:gc

-Djava.compiler=none


-XX:CompileThreshold=5000


#cat /proc/cpuinfo &
if   [  $SERVER_PORT == 8002  ];
then
   /jdk-11.0.7/bin/java -Xms2048m  -Xmn1024m -XX:CompileThreshold=2000 -jar /challenge.jar $SERVER_PORT &
else
   /jdk-11.0.7/bin/java -Xms512m  -Xmn1024m -XX:CompileThreshold=2000 -jar /challenge.jar $SERVER_PORT &
fi
tail -f /start.sh


通过修改JVM参数：-XX:MaxDirectMemorySize=40M，将最大堆外内存设置为40M
